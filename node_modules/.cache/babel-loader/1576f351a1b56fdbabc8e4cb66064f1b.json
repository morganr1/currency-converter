{"ast":null,"code":"var _jsxFileName = \"/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/components/converter/converter.web.js\";\nimport React, { Component } from 'react';\nimport { fetchLatestCurrencies } from '../../api/currency.api';\nimport { Result, Currencies, Amount } from '../index';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport fx from 'money';\nimport './converter.scss';\nfx.base = 'EUR';\n\nclass Converter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currencies: [],\n      result: null,\n      fromCurrency: \"EUR\",\n      toCurrency: \"GBP\",\n      amount: 1\n    };\n\n    this.componentDidMount = async () => {\n      // A default while the api request returns values\n      const currencyArray = [\"EUR\"];\n      let rates = await fetchLatestCurrencies();\n      fx.rates = rates;\n\n      for (const key in rates) {\n        currencyArray.push(key);\n      }\n\n      currencyArray.sort();\n      this.setState({\n        currencies: currencyArray\n      });\n    };\n\n    this.handleConversion = () => this.setState({\n      result: fx(this.state.amount).from(this.state.fromCurrency).to(this.state.toCurrency)\n    });\n\n    this.handleCurrencySelect = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      if (name === \"From\") {\n        this.setState({\n          fromCurrency: value\n        });\n      }\n\n      if (name === \"To\") {\n        this.setState({\n          toCurrency: value\n        });\n      }\n    };\n\n    this.setAmount = amount => this.setState({\n      amount\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const _this$state = this.state,\n          currencies = _this$state.currencies,\n          toCurrency = _this$state.toCurrency,\n          fromCurrency = _this$state.fromCurrency,\n          amount = _this$state.amount; // Once currencies are loaded - do an initial conversion to be shown on first render\n\n    if (prevState.currencies !== currencies) {\n      this.handleConversion();\n    } // when the user changes the 'To' currency, automatically convert\n\n\n    if (prevState.toCurrency !== toCurrency || prevState.fromCurrency !== fromCurrency) {\n      this.handleConversion();\n    }\n\n    if (prevState.amount !== this.state.amount && amount) {\n      this.handleConversion();\n    }\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          fromCurrency = _this$state2.fromCurrency,\n          toCurrency = _this$state2.toCurrency,\n          currencies = _this$state2.currencies,\n          result = _this$state2.result,\n          amount = _this$state2.amount;\n    const themeType = this.props.themeType;\n    const disabled = !amount;\n    return React.createElement(Paper, {\n      elevation: 21,\n      className: \"converter-container\",\n      style: {\n        paddingTop: 20,\n        paddingBottom: 30\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: \"title-text\",\n      variant: \"h5\",\n      component: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"CURRENCY CONVERTER\"), React.createElement(Result, Object.assign({\n      result,\n      toCurrency,\n      themeType\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), React.createElement(Currencies, Object.assign({\n      disabled,\n      currencies,\n      fromCurrency,\n      toCurrency,\n      handleCurrencySelect: this.handleCurrencySelect\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(Amount, Object.assign({\n      disabled,\n      amount,\n      setAmountCallback: this.setAmount,\n      buttonText: 'Clear'\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Converter;","map":{"version":3,"sources":["/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/components/converter/converter.web.js"],"names":["React","Component","fetchLatestCurrencies","Result","Currencies","Amount","Typography","Paper","fx","base","Converter","state","currencies","result","fromCurrency","toCurrency","amount","componentDidMount","currencyArray","rates","key","push","sort","setState","handleConversion","from","to","handleCurrencySelect","target","value","name","setAmount","componentDidUpdate","prevProps","prevState","render","themeType","props","disabled","paddingTop","paddingBottom","setAmountCallback","buttonText"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { fetchLatestCurrencies } from '../../api/currency.api';\nimport { Result, Currencies, Amount } from '../index';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport fx from 'money';\nimport './converter.scss';\n\nfx.base = 'EUR';\n\nclass Converter extends Component {\n    state = {\n        currencies: [],\n        result: null,\n        fromCurrency: \"EUR\",\n        toCurrency: \"GBP\",\n        amount: 1,\n    };\n\n    componentDidMount = async () => {\n        // A default while the api request returns values\n        const currencyArray = [\"EUR\"];\n        let rates = await fetchLatestCurrencies();\n        fx.rates = rates;\n        for (const key in rates) {\n            currencyArray.push(key);\n        }\n        currencyArray.sort();\n        this.setState({ currencies: currencyArray })\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        const { currencies, toCurrency, fromCurrency, amount } = this.state;\n        // Once currencies are loaded - do an initial conversion to be shown on first render\n        if(prevState.currencies !== currencies) {\n            this.handleConversion();\n        }\n        // when the user changes the 'To' currency, automatically convert\n        if(prevState.toCurrency !== toCurrency || prevState.fromCurrency !== fromCurrency) {\n            this.handleConversion();\n        }\n\n        if(prevState.amount !== this.state.amount && amount) {\n            this.handleConversion();\n        }\n\n    }\n\n    handleConversion = () => this.setState({ result: fx(this.state.amount).from(this.state.fromCurrency).to(this.state.toCurrency) });\n\n    handleCurrencySelect = ({ target: { value, name }}) => {\n        if (name === \"From\") {\n            this.setState({ fromCurrency: value })\n        }\n        if (name === \"To\") {\n            this.setState({ toCurrency: value });\n        }\n    };\n\n    setAmount = amount => this.setState({ amount });\n\n    render() {\n        const { fromCurrency, toCurrency, currencies, result, amount } = this.state;\n        const { themeType } = this.props;\n        const disabled = !amount;\n        return (\n            <Paper elevation={21} className=\"converter-container\" style={{ paddingTop: 20, paddingBottom: 30 }}>\n                <Typography className=\"title-text\" variant=\"h5\" component=\"h5\">CURRENCY CONVERTER</Typography>\n                <Result {...{ result, toCurrency, themeType }} />\n                <Currencies {...{ disabled, currencies, fromCurrency, toCurrency, handleCurrencySelect: this.handleCurrencySelect }} />\n                <Amount {...{ disabled, amount, setAmountCallback: this.setAmount, buttonText: 'Clear' }} />\n            </Paper>\n        )\n    }\n}\n\nexport default Converter;\n"]},"metadata":{},"sourceType":"module"}