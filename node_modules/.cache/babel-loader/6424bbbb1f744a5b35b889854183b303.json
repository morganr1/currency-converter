{"ast":null,"code":"var _jsxFileName = \"/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/components/converter/converter.web.js\";\nimport React, { Component } from 'react';\nimport { fetchLatestCurrencies } from '../../api/currency.api';\nimport SimpleSelect from \"../currencyDropdown/currencyDropdown.web\";\nimport fx from 'money';\nimport './converter.css';\nfx.base = 'EUR';\n\nclass Converter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currencies: [],\n      result: null,\n      fromCurrency: \"EUR\",\n      toCurrency: \"GBP\",\n      amount: 1\n    };\n\n    this.componentDidMount = async () => {\n      const currencyArray = [\"EUR\"];\n      let rates = await fetchLatestCurrencies();\n      fx.rates = rates;\n\n      for (const key in rates) {\n        currencyArray.push(key);\n      }\n\n      currencyArray.sort();\n      this.setState({\n        currencies: currencyArray\n      });\n    };\n\n    this.convertHandler = () => {\n      if (this.state.fromCurrency !== this.state.toCurrency) {\n        const convertedResult = fx(this.state.amount).from(this.state.fromCurrency).to(this.state.toCurrency);\n        this.setState({\n          result: convertedResult\n        });\n      } else {\n        this.setState({\n          result: \"You cant convert the same currency!\"\n        });\n      }\n    };\n\n    this.selectHandler = event => {\n      if (event.target.name === \"From\") {\n        this.setState({\n          fromCurrency: event.target.value\n        });\n      }\n\n      if (event.target.name === \"To\") {\n        this.setState({\n          toCurrency: event.target.value\n        });\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          fromCurrency = _this$state.fromCurrency,\n          toCurrency = _this$state.toCurrency,\n          currencies = _this$state.currencies,\n          result = _this$state.result,\n          amount = _this$state.amount;\n    return React.createElement(\"div\", {\n      className: \"converter-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"TopHalf\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Currency Converter\"), React.createElement(SimpleSelect, Object.assign({\n      currencies,\n      currentCurrency: fromCurrency,\n      selectCurrency: this.selectHandler,\n      label: 'From'\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      name: \"amount\",\n      type: \"text\",\n      value: amount,\n      onChange: event => this.setState({\n        amount: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"BottomHalf\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(SimpleSelect, Object.assign({\n      currencies,\n      currentCurrency: toCurrency,\n      selectCurrency: this.selectHandler,\n      label: 'To'\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: this.convertHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Convert\")), result && React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, result));\n  }\n\n}\n\nexport default Converter;","map":{"version":3,"sources":["/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/components/converter/converter.web.js"],"names":["React","Component","fetchLatestCurrencies","SimpleSelect","fx","base","Converter","state","currencies","result","fromCurrency","toCurrency","amount","componentDidMount","currencyArray","rates","key","push","sort","setState","convertHandler","convertedResult","from","to","selectHandler","event","target","name","value","render","currentCurrency","selectCurrency","label"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { fetchLatestCurrencies } from '../../api/currency.api';\nimport SimpleSelect from \"../currencyDropdown/currencyDropdown.web\";\nimport fx from 'money';\nimport './converter.css';\n\nfx.base = 'EUR';\n\nclass Converter extends Component {\n    state = {\n        currencies: [],\n        result: null,\n        fromCurrency: \"EUR\",\n        toCurrency: \"GBP\",\n        amount: 1,\n    };\n\n    componentDidMount = async () => {\n        const currencyArray = [\"EUR\"];\n        let rates = await fetchLatestCurrencies();\n        fx.rates = rates;\n        for (const key in rates) {\n            currencyArray.push(key);\n        }\n        currencyArray.sort();\n        this.setState({ currencies: currencyArray })\n    };\n\n\n    convertHandler = () => {\n        if (this.state.fromCurrency !== this.state.toCurrency) {\n            const convertedResult = fx(this.state.amount).from(this.state.fromCurrency).to(this.state.toCurrency);\n            this.setState({ result: convertedResult });\n        } else {\n            this.setState({ result: \"You cant convert the same currency!\" })\n        }\n    };\n\n    selectHandler = event => {\n        if (event.target.name === \"From\") {\n            this.setState({ fromCurrency: event.target.value })\n        }\n        if (event.target.name === \"To\") {\n            this.setState({ toCurrency: event.target.value })\n        }\n    };\n\n    render() {\n        const { fromCurrency, toCurrency, currencies, result, amount } = this.state;\n\n        return (\n            <div className=\"converter-container\">\n                    <div className=\"TopHalf\">\n                        <h3>Currency Converter</h3>\n                        <SimpleSelect {...{ currencies, currentCurrency: fromCurrency, selectCurrency: this.selectHandler, label: 'From' }}/>\n                        <input\n                            name=\"amount\"\n                            type=\"text\"\n                            value={amount}\n                            onChange={event =>\n                                this.setState({ amount: event.target.value })\n                            }\n                        />\n                    </div>\n                    <div className=\"BottomHalf\" >\n                        <SimpleSelect {...{ currencies, currentCurrency: toCurrency, selectCurrency: this.selectHandler, label: 'To' }}/>\n                        <button onClick={this.convertHandler}>Convert</button>\n                    </div>\n                    {result && <h3>{result}</h3>}\n            </div>\n        )\n    }\n}\n\nexport default Converter;\n"]},"metadata":{},"sourceType":"module"}