{"ast":null,"code":"/*!\n * money.js / fx() v0.2\n * Copyright 2014 Open Exchange Rates\n *\n * JavaScript library for realtime currency conversion and exchange rate calculation.\n *\n * Freely distributable under the MIT license.\n * Portions of money.js are inspired by or borrowed from underscore.js\n *\n * For details, examples and documentation:\n * http://openexchangerates.github.io/money.js/\n */\n(function (root, undefined) {\n  // Create a safe reference to the money.js object for use below.\n  var fx = function (obj) {\n    return new fxWrapper(obj);\n  }; // Current version.\n\n\n  fx.version = '0.2';\n  /* --- Setup --- */\n  // fxSetup can be defined before loading money.js, to set the exchange rates and the base\n  // (and default from/to) currencies - or the rates can be loaded in later if needed.\n\n  var fxSetup = root.fxSetup || {\n    rates: {},\n    base: \"\"\n  }; // Object containing exchange rates relative to the fx.base currency, eg { \"GBP\" : \"0.64\" }\n\n  fx.rates = fxSetup.rates; // Default exchange rate base currency (eg \"USD\"), which all the exchange rates are relative to\n\n  fx.base = fxSetup.base; // Default from / to currencies for conversion via fx.convert():\n\n  fx.settings = {\n    from: fxSetup.from || fx.base,\n    to: fxSetup.to || fx.base\n  };\n  /* --- Conversion --- */\n  // The base function of the library: converts a value from one currency to another\n\n  var convert = fx.convert = function (val, opts) {\n    // Convert arrays recursively\n    if (typeof val === 'object' && val.length) {\n      for (var i = 0; i < val.length; i++) {\n        val[i] = convert(val[i], opts);\n      }\n\n      return val;\n    } // Make sure we gots some opts\n\n\n    opts = opts || {}; // We need to know the `from` and `to` currencies\n\n    if (!opts.from) opts.from = fx.settings.from;\n    if (!opts.to) opts.to = fx.settings.to; // Multiple the value by the exchange rate\n\n    return val * getRate(opts.to, opts.from);\n  }; // Returns the exchange rate to `target` currency from `base` currency\n\n\n  var getRate = function (to, from) {\n    // Save bytes in minified version\n    var rates = fx.rates; // Make sure the base rate is in the rates object:\n\n    rates[fx.base] = 1; // Throw an error if either rate isn't in the rates array\n\n    if (!rates[to] || !rates[from]) throw \"fx error\"; // If `from` currency === fx.base, return the basic exchange rate for the `to` currency\n\n    if (from === fx.base) {\n      return rates[to];\n    } // If `to` currency === fx.base, return the basic inverse rate of the `from` currency\n\n\n    if (to === fx.base) {\n      return 1 / rates[from];\n    } // Otherwise, return the `to` rate multipled by the inverse of the `from` rate to get the\n    // relative exchange rate between the two currencies\n\n\n    return rates[to] * (1 / rates[from]);\n  };\n  /* --- OOP wrapper and chaining --- */\n  // If fx(val) is called as a function, it returns a wrapped object that can be used OO-style\n\n\n  var fxWrapper = function (val) {\n    // Experimental: parse strings to pull out currency code and value:\n    if (typeof val === \"string\") {\n      this._v = parseFloat(val.replace(/[^0-9-.]/g, \"\"));\n      this._fx = val.replace(/([^A-Za-z])/g, \"\");\n    } else {\n      this._v = val;\n    }\n  }; // Expose `wrapper.prototype` as `fx.prototype`\n\n\n  var fxProto = fx.prototype = fxWrapper.prototype; // fx(val).convert(opts) does the same thing as fx.convert(val, opts)\n\n  fxProto.convert = function () {\n    var args = Array.prototype.slice.call(arguments);\n    args.unshift(this._v);\n    return convert.apply(fx, args);\n  }; // fx(val).from(currency) returns a wrapped `fx` where the value has been converted from\n  // `currency` to the `fx.base` currency. Should be followed by `.to(otherCurrency)`\n\n\n  fxProto.from = function (currency) {\n    var wrapped = fx(convert(this._v, {\n      from: currency,\n      to: fx.base\n    }));\n    wrapped._fx = fx.base;\n    return wrapped;\n  }; // fx(val).to(currency) returns the value, converted from `fx.base` to `currency`\n\n\n  fxProto.to = function (currency) {\n    return convert(this._v, {\n      from: this._fx ? this._fx : fx.settings.from,\n      to: currency\n    });\n  };\n  /* --- Module Definition --- */\n  // Export the fx object for CommonJS. If being loaded as an AMD module, define it as such.\n  // Otherwise, just add `fx` to the global object\n\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = fx;\n    }\n\n    exports.fx = fx;\n  } else if (typeof define === 'function' && define.amd) {\n    // Return the library as an AMD module:\n    define([], function () {\n      return fx;\n    });\n  } else {\n    // Use fx.noConflict to restore `fx` back to its original value before money.js loaded.\n    // Returns a reference to the library's `fx` object; e.g. `var money = fx.noConflict();`\n    fx.noConflict = function (previousFx) {\n      return function () {\n        // Reset the value of the root's `fx` variable:\n        root.fx = previousFx; // Delete the noConflict function:\n\n        fx.noConflict = undefined; // Return reference to the library to re-assign it:\n\n        return fx;\n      };\n    }(root.fx); // Declare `fx` on the root (global/window) object:\n\n\n    root['fx'] = fx;\n  } // Root will be `window` in browser or `global` on the server:\n\n})(this);","map":{"version":3,"sources":["/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/node_modules/money/money.js"],"names":["root","undefined","fx","obj","fxWrapper","version","fxSetup","rates","base","settings","from","to","convert","val","opts","length","i","getRate","_v","parseFloat","replace","_fx","fxProto","prototype","args","Array","slice","call","arguments","unshift","apply","currency","wrapped","exports","module","define","amd","noConflict","previousFx"],"mappings":"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","sourcesContent":["/*!\n * money.js / fx() v0.2\n * Copyright 2014 Open Exchange Rates\n *\n * JavaScript library for realtime currency conversion and exchange rate calculation.\n *\n * Freely distributable under the MIT license.\n * Portions of money.js are inspired by or borrowed from underscore.js\n *\n * For details, examples and documentation:\n * http://openexchangerates.github.io/money.js/\n */\n(function(root, undefined) {\n\n\t// Create a safe reference to the money.js object for use below.\n\tvar fx = function(obj) {\n\t\treturn new fxWrapper(obj);\n\t};\n\n\t// Current version.\n\tfx.version = '0.2';\n\n\n\t/* --- Setup --- */\n\n\t// fxSetup can be defined before loading money.js, to set the exchange rates and the base\n\t// (and default from/to) currencies - or the rates can be loaded in later if needed.\n\tvar fxSetup = root.fxSetup || {\n\t\trates : {},\n\t\tbase : \"\"\n\t};\n\n\t// Object containing exchange rates relative to the fx.base currency, eg { \"GBP\" : \"0.64\" }\n\tfx.rates = fxSetup.rates;\n\n\t// Default exchange rate base currency (eg \"USD\"), which all the exchange rates are relative to\n\tfx.base = fxSetup.base;\n\n\t// Default from / to currencies for conversion via fx.convert():\n\tfx.settings = {\n\t\tfrom : fxSetup.from || fx.base,\n\t\tto : fxSetup.to || fx.base\n\t};\n\n\n\t/* --- Conversion --- */\n\n\t// The base function of the library: converts a value from one currency to another\n\tvar convert = fx.convert = function(val, opts) {\n\t\t// Convert arrays recursively\n\t\tif (typeof val === 'object' && val.length) {\n\t\t\tfor (var i = 0; i< val.length; i++ ) {\n\t\t\t\tval[i] = convert(val[i], opts);\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\n\t\t// Make sure we gots some opts\n\t\topts = opts || {};\n\n\t\t// We need to know the `from` and `to` currencies\n\t\tif( !opts.from ) opts.from = fx.settings.from;\n\t\tif( !opts.to ) opts.to = fx.settings.to;\n\n\t\t// Multiple the value by the exchange rate\n\t\treturn val * getRate( opts.to, opts.from );\n\t};\n\n\t// Returns the exchange rate to `target` currency from `base` currency\n\tvar getRate = function(to, from) {\n\t\t// Save bytes in minified version\n\t\tvar rates = fx.rates;\n\n\t\t// Make sure the base rate is in the rates object:\n\t\trates[fx.base] = 1;\n\n\t\t// Throw an error if either rate isn't in the rates array\n\t\tif ( !rates[to] || !rates[from] ) throw \"fx error\";\n\n\t\t// If `from` currency === fx.base, return the basic exchange rate for the `to` currency\n\t\tif ( from === fx.base ) {\n\t\t\treturn rates[to];\n\t\t}\n\n\t\t// If `to` currency === fx.base, return the basic inverse rate of the `from` currency\n\t\tif ( to === fx.base ) {\n\t\t\treturn 1 / rates[from];\n\t\t}\n\n\t\t// Otherwise, return the `to` rate multipled by the inverse of the `from` rate to get the\n\t\t// relative exchange rate between the two currencies\n\t\treturn rates[to] * (1 / rates[from]);\n\t};\n\n\n\t/* --- OOP wrapper and chaining --- */\n\n\t// If fx(val) is called as a function, it returns a wrapped object that can be used OO-style\n\tvar fxWrapper = function(val) {\n\t\t// Experimental: parse strings to pull out currency code and value:\n\t\tif ( typeof\tval === \"string\" ) {\n\t\t\tthis._v = parseFloat(val.replace(/[^0-9-.]/g, \"\"));\n\t\t\tthis._fx = val.replace(/([^A-Za-z])/g, \"\");\n\t\t} else {\n\t\t\tthis._v = val;\n\t\t}\n\t};\n\n\t// Expose `wrapper.prototype` as `fx.prototype`\n\tvar fxProto = fx.prototype = fxWrapper.prototype;\n\n\t// fx(val).convert(opts) does the same thing as fx.convert(val, opts)\n\tfxProto.convert = function() {\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\targs.unshift(this._v);\n\t\treturn convert.apply(fx, args);\n\t};\n\n\t// fx(val).from(currency) returns a wrapped `fx` where the value has been converted from\n\t// `currency` to the `fx.base` currency. Should be followed by `.to(otherCurrency)`\n\tfxProto.from = function(currency) {\n\t\tvar wrapped = fx(convert(this._v, {from: currency, to: fx.base}));\n\t\twrapped._fx = fx.base;\n\t\treturn wrapped;\n\t};\n\n\t// fx(val).to(currency) returns the value, converted from `fx.base` to `currency`\n\tfxProto.to = function(currency) {\n\t\treturn convert(this._v, {from: this._fx ? this._fx : fx.settings.from, to: currency});\n\t};\n\n\n\t/* --- Module Definition --- */\n\n\t// Export the fx object for CommonJS. If being loaded as an AMD module, define it as such.\n\t// Otherwise, just add `fx` to the global object\n\tif (typeof exports !== 'undefined') {\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\texports = module.exports = fx;\n\t\t}\n\t\texports.fx = fx;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\t// Return the library as an AMD module:\n\t\tdefine([], function() {\n\t\t\treturn fx;\n\t\t});\n\t} else {\n\t\t// Use fx.noConflict to restore `fx` back to its original value before money.js loaded.\n\t\t// Returns a reference to the library's `fx` object; e.g. `var money = fx.noConflict();`\n\t\tfx.noConflict = (function(previousFx) {\n\t\t\treturn function() {\n\t\t\t\t// Reset the value of the root's `fx` variable:\n\t\t\t\troot.fx = previousFx;\n\t\t\t\t// Delete the noConflict function:\n\t\t\t\tfx.noConflict = undefined;\n\t\t\t\t// Return reference to the library to re-assign it:\n\t\t\t\treturn fx;\n\t\t\t};\n\t\t})(root.fx);\n\n\t\t// Declare `fx` on the root (global/window) object:\n\t\troot['fx'] = fx;\n\t}\n\n\t// Root will be `window` in browser or `global` on the server:\n}(this));\n"]},"metadata":{},"sourceType":"script"}