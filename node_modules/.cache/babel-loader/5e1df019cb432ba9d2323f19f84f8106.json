{"ast":null,"code":"var _jsxFileName = \"/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/components/converter/converter.web.js\";\nimport React, { Component } from 'react';\nimport { fetchLatestCurrencies } from '../../api/currency.api';\nimport CurrencyDropdown from '../currencyDropdown/currencyDropdown.web';\nimport TextField from '../textField/textField.web';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport fx from 'money';\nimport './converter.css';\nfx.base = 'EUR';\n\nclass Converter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currencies: [],\n      result: 'Currency Converter',\n      fromCurrency: \"EUR\",\n      toCurrency: \"GBP\",\n      amount: 1\n    };\n\n    this.componentDidMount = async () => {\n      const currencyArray = [\"EUR\"]; // A default while the api request returns values\n\n      let rates = await fetchLatestCurrencies();\n      fx.rates = rates;\n\n      for (const key in rates) {\n        currencyArray.push(key);\n      }\n\n      currencyArray.sort();\n      this.setState({\n        currencies: currencyArray\n      });\n    };\n\n    this.handleConversion = () => {\n      if (this.state.fromCurrency !== this.state.toCurrency) {\n        const convertedResult = fx(this.state.amount).from(this.state.fromCurrency).to(this.state.toCurrency);\n        this.setState({\n          result: convertedResult\n        });\n      } else {\n        this.setState({\n          result: \"You cant convert the same currency!\"\n        });\n      }\n    };\n\n    this.handleCurrencySelect = event => {\n      if (event.target.name === \"From\") {\n        this.setState({\n          fromCurrency: event.target.value\n        });\n      }\n\n      if (event.target.name === \"To\") {\n        this.setState({\n          toCurrency: event.target.value\n        });\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          fromCurrency = _this$state.fromCurrency,\n          toCurrency = _this$state.toCurrency,\n          currencies = _this$state.currencies,\n          result = _this$state.result,\n          amount = _this$state.amount;\n    return React.createElement(\"div\", {\n      className: \"converter-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: \"result-text\",\n      variant: \"h4\",\n      component: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, result, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, result > 0 && toCurrency)), React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        textAlign: 'center',\n        justifyContent: 'center',\n        alignItems: 'baseline'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(CurrencyDropdown, Object.assign({\n      currencies,\n      currentCurrency: fromCurrency,\n      selectCurrency: this.handleCurrencySelect,\n      label: 'From'\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })), React.createElement(CurrencyDropdown, Object.assign({\n      currencies,\n      currentCurrency: toCurrency,\n      selectCurrency: this.handleCurrencySelect,\n      label: 'To'\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: '0 auto',\n        minWidth: 257\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(TextField, Object.assign({\n      initialAmount: amount,\n      setAmount: e => this.setState({\n        amount: e.target.value\n      })\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(Button, {\n      onClick: this.handleConversion,\n      variant: \"contained\",\n      color: \"secondary\",\n      startIcon: React.createElement(CachedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Convert\")));\n  }\n\n}\n\nexport default Converter;","map":{"version":3,"sources":["/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/components/converter/converter.web.js"],"names":["React","Component","fetchLatestCurrencies","CurrencyDropdown","TextField","Typography","Button","CachedIcon","fx","base","Converter","state","currencies","result","fromCurrency","toCurrency","amount","componentDidMount","currencyArray","rates","key","push","sort","setState","handleConversion","convertedResult","from","to","handleCurrencySelect","event","target","name","value","render","display","flexDirection","textAlign","justifyContent","alignItems","currentCurrency","selectCurrency","label","margin","minWidth","initialAmount","setAmount","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,qBAAT,QAAsC,wBAAtC;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,EAAP,MAAe,OAAf;AACA,OAAO,iBAAP;AAEAA,EAAE,CAACC,IAAH,GAAU,KAAV;;AAEA,MAAMC,SAAN,SAAwBT,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC9BU,KAD8B,GACtB;AACJC,MAAAA,UAAU,EAAE,EADR;AAEJC,MAAAA,MAAM,EAAE,oBAFJ;AAGJC,MAAAA,YAAY,EAAE,KAHV;AAIJC,MAAAA,UAAU,EAAE,KAJR;AAKJC,MAAAA,MAAM,EAAE;AALJ,KADsB;;AAAA,SAS9BC,iBAT8B,GASV,YAAY;AAC5B,YAAMC,aAAa,GAAG,CAAC,KAAD,CAAtB,CAD4B,CACG;;AAC/B,UAAIC,KAAK,GAAG,MAAMjB,qBAAqB,EAAvC;AACAM,MAAAA,EAAE,CAACW,KAAH,GAAWA,KAAX;;AACA,WAAK,MAAMC,GAAX,IAAkBD,KAAlB,EAAyB;AACrBD,QAAAA,aAAa,CAACG,IAAd,CAAmBD,GAAnB;AACH;;AACDF,MAAAA,aAAa,CAACI,IAAd;AACA,WAAKC,QAAL,CAAc;AAAEX,QAAAA,UAAU,EAAEM;AAAd,OAAd;AACH,KAlB6B;;AAAA,SAqB9BM,gBArB8B,GAqBX,MAAM;AACrB,UAAI,KAAKb,KAAL,CAAWG,YAAX,KAA4B,KAAKH,KAAL,CAAWI,UAA3C,EAAuD;AACnD,cAAMU,eAAe,GAAGjB,EAAE,CAAC,KAAKG,KAAL,CAAWK,MAAZ,CAAF,CAAsBU,IAAtB,CAA2B,KAAKf,KAAL,CAAWG,YAAtC,EAAoDa,EAApD,CAAuD,KAAKhB,KAAL,CAAWI,UAAlE,CAAxB;AACA,aAAKQ,QAAL,CAAc;AAAEV,UAAAA,MAAM,EAAEY;AAAV,SAAd;AACH,OAHD,MAGO;AACH,aAAKF,QAAL,CAAc;AAAEV,UAAAA,MAAM,EAAE;AAAV,SAAd;AACH;AACJ,KA5B6B;;AAAA,SA8B9Be,oBA9B8B,GA8BPC,KAAK,IAAI;AAC5B,UAAIA,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,MAA1B,EAAkC;AAC9B,aAAKR,QAAL,CAAc;AAAET,UAAAA,YAAY,EAAEe,KAAK,CAACC,MAAN,CAAaE;AAA7B,SAAd;AACH;;AACD,UAAIH,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,IAA1B,EAAgC;AAC5B,aAAKR,QAAL,CAAc;AAAER,UAAAA,UAAU,EAAEc,KAAK,CAACC,MAAN,CAAaE;AAA3B,SAAd;AACH;AACJ,KArC6B;AAAA;;AAuC9BC,EAAAA,MAAM,GAAG;AAAA,wBAC4D,KAAKtB,KADjE;AAAA,UACGG,YADH,eACGA,YADH;AAAA,UACiBC,UADjB,eACiBA,UADjB;AAAA,UAC6BH,UAD7B,eAC6BA,UAD7B;AAAA,UACyCC,MADzC,eACyCA,MADzC;AAAA,UACiDG,MADjD,eACiDA,MADjD;AAEL,WACI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAC,aAAtB;AAAoC,MAAA,OAAO,EAAC,IAA5C;AAAiD,MAAA,SAAS,EAAC,IAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiEH,MAAjE,EAAwE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,MAAM,GAAG,CAAT,IAAcE,UAAlB,CAAxE,CAFR,EAIY;AAAK,MAAA,KAAK,EAAE;AAAEmB,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,aAAa,EAAE,KAAlC;AAAyCC,QAAAA,SAAS,EAAE,QAApD;AAA8DC,QAAAA,cAAc,EAAE,QAA9E;AAAwFC,QAAAA,UAAU,EAAE;AAApG,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,gBAAD,gBAAsB;AAAE1B,MAAAA,UAAF;AAAc2B,MAAAA,eAAe,EAAEzB,YAA/B;AAA6C0B,MAAAA,cAAc,EAAE,KAAKZ,oBAAlE;AAAwFa,MAAAA,KAAK,EAAE;AAA/F,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,EAEI,oBAAC,gBAAD,gBAAsB;AAAE7B,MAAAA,UAAF;AAAc2B,MAAAA,eAAe,EAAExB,UAA/B;AAA2CyB,MAAAA,cAAc,EAAE,KAAKZ,oBAAhE;AAAsFa,MAAAA,KAAK,EAAE;AAA7F,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFJ,CAJZ,EAQY;AAAK,MAAA,KAAK,EAAE;AAAEP,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,aAAa,EAAE,QAAlC;AAA4CO,QAAAA,MAAM,EAAE,QAApD;AAA8DC,QAAAA,QAAQ,EAAE;AAAxE,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD,gBAAe;AAAEC,MAAAA,aAAa,EAAE5B,MAAjB;AAAyB6B,MAAAA,SAAS,EAAEC,CAAC,IAAI,KAAKvB,QAAL,CAAc;AAAEP,QAAAA,MAAM,EAAE8B,CAAC,CAAChB,MAAF,CAASE;AAAnB,OAAd;AAAzC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,EAEI,oBAAC,MAAD;AACI,MAAA,OAAO,EAAE,KAAKR,gBADlB;AAEI,MAAA,OAAO,EAAC,WAFZ;AAGI,MAAA,KAAK,EAAC,WAHV;AAII,MAAA,SAAS,EAAE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,CARZ,CADJ;AAsBH;;AA/D6B;;AAkElC,eAAed,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport { fetchLatestCurrencies } from '../../api/currency.api';\nimport CurrencyDropdown from '../currencyDropdown/currencyDropdown.web';\nimport TextField from '../textField/textField.web';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport fx from 'money';\nimport './converter.css';\n\nfx.base = 'EUR';\n\nclass Converter extends Component {\n    state = {\n        currencies: [],\n        result: 'Currency Converter',\n        fromCurrency: \"EUR\",\n        toCurrency: \"GBP\",\n        amount: 1,\n    };\n\n    componentDidMount = async () => {\n        const currencyArray = [\"EUR\"]; // A default while the api request returns values\n        let rates = await fetchLatestCurrencies();\n        fx.rates = rates;\n        for (const key in rates) {\n            currencyArray.push(key);\n        }\n        currencyArray.sort();\n        this.setState({ currencies: currencyArray })\n    };\n\n\n    handleConversion = () => {\n        if (this.state.fromCurrency !== this.state.toCurrency) {\n            const convertedResult = fx(this.state.amount).from(this.state.fromCurrency).to(this.state.toCurrency);\n            this.setState({ result: convertedResult });\n        } else {\n            this.setState({ result: \"You cant convert the same currency!\" })\n        }\n    };\n\n    handleCurrencySelect = event => {\n        if (event.target.name === \"From\") {\n            this.setState({ fromCurrency: event.target.value })\n        }\n        if (event.target.name === \"To\") {\n            this.setState({ toCurrency: event.target.value })\n        }\n    };\n\n    render() {\n        const { fromCurrency, toCurrency, currencies, result, amount } = this.state;\n        return (\n            <div className=\"converter-container\">\n                {\n                    <Typography className=\"result-text\" variant=\"h4\" component=\"h4\">{result}<p>{result > 0 && toCurrency}</p></Typography>\n                }\n                        <div style={{ display: 'flex', flexDirection: 'row', textAlign: 'center', justifyContent: 'center', alignItems: 'baseline' }}>\n                            <CurrencyDropdown {...{ currencies, currentCurrency: fromCurrency, selectCurrency: this.handleCurrencySelect, label: 'From' }}/>\n                            <CurrencyDropdown {...{ currencies, currentCurrency: toCurrency, selectCurrency: this.handleCurrencySelect, label: 'To' }}/>\n                        </div>\n                        <div style={{ display: 'flex', flexDirection: 'column', margin: '0 auto', minWidth: 257 }}>\n                            <TextField {...{ initialAmount: amount, setAmount: e => this.setState({ amount: e.target.value }) }} />\n                            <Button\n                                onClick={this.handleConversion}\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                startIcon={<CachedIcon />}\n                            >\n                                Convert\n                            </Button>\n                        </div>\n            </div>\n        )\n    }\n}\n\nexport default Converter;\n"]},"metadata":{},"sourceType":"module"}