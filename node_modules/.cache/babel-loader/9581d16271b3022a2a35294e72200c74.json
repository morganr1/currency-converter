{"ast":null,"code":"import _slicedToArray from \"/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/App.js\";\nimport React, { useState } from 'react';\nimport CurrencyConverter from './components';\nimport Button from '@material-ui/core/Button';\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles'; // ToDo\n// Breakpoints for responsive\n// Tests\n// input validation (empty and only numerical)\n\nfunction App() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        darkMode = _useState2[0],\n        toggleDarkMode = _useState2[1];\n\n  let theme = React.useMemo(() => createMuiTheme({\n    palette: {\n      type: darkMode ? 'dark' : 'light'\n    }\n  }), [darkMode]);\n  theme = responsiveFontSizes(theme);\n  const type = theme.palette.type;\n  return React.createElement(ThemeProvider, {\n    theme: theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Button, {\n    style: {\n      position: 'absolute',\n      top: 0,\n      right: 0\n    },\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: () => toggleDarkMode(!darkMode),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Go Dark\"), React.createElement(CurrencyConverter, {\n    themeType: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/App.js"],"names":["React","useState","CurrencyConverter","Button","createMuiTheme","ThemeProvider","responsiveFontSizes","App","darkMode","toggleDarkMode","theme","useMemo","palette","type","position","top","right"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,iBAAP,MAA8B,cAA9B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,cAAT,EAAyBC,aAAzB,EAAwCC,mBAAxC,QAAmE,0BAAnE,C,CAEA;AACA;AACA;AACA;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACwBN,QAAQ,CAAC,KAAD,CADhC;AAAA;AAAA,QACJO,QADI;AAAA,QACMC,cADN;;AAEX,MAAIC,KAAK,GAAGV,KAAK,CAACW,OAAN,CACR,MACIP,cAAc,CAAC;AACXQ,IAAAA,OAAO,EAAE;AACLC,MAAAA,IAAI,EAAEL,QAAQ,GAAG,MAAH,GAAY;AADrB;AADE,GAAD,CAFV,EAOR,CAACA,QAAD,CAPQ,CAAZ;AASAE,EAAAA,KAAK,GAAGJ,mBAAmB,CAACI,KAAD,CAA3B;AACA,QAAMG,IAAI,GAAGH,KAAK,CAACE,OAAN,CAAcC,IAA3B;AAEA,SACM,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEH,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE;AAACI,MAAAA,QAAQ,EAAE,UAAX;AAAuBC,MAAAA,GAAG,EAAE,CAA5B;AAA+BC,MAAAA,KAAK,EAAE;AAAtC,KAAf;AAA0D,IAAA,OAAO,EAAC,WAAlE;AAA8E,IAAA,KAAK,EAAC,WAApF;AAAgG,IAAA,OAAO,EAAE,MAAMP,cAAc,CAAC,CAACD,QAAF,CAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE,oBAAC,iBAAD;AAAmB,IAAA,SAAS,EAAEK,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADN;AAMH;;AAED,eAAeN,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport CurrencyConverter from './components';\nimport Button from '@material-ui/core/Button';\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles';\n\n// ToDo\n// Breakpoints for responsive\n// Tests\n// input validation (empty and only numerical)\n\nfunction App() {\n    const [darkMode, toggleDarkMode] = useState(false);\n    let theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    type: darkMode ? 'dark' : 'light',\n                },\n            }),\n        [darkMode],\n    );\n    theme = responsiveFontSizes(theme);\n    const type = theme.palette.type;\n\n    return (\n          <ThemeProvider theme={theme}>\n            <Button style={{position: 'absolute', top: 0, right: 0 }} variant=\"contained\" color=\"secondary\" onClick={() => toggleDarkMode(!darkMode)}>Go Dark</Button>\n            <CurrencyConverter themeType={type} />\n          </ThemeProvider>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}