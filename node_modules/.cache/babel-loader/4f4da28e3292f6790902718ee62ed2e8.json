{"ast":null,"code":"var _jsxFileName = \"/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/components/converter/converter.web.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n\nclass Converter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currencies: [],\n      result: null,\n      fromCurrency: \"EUR\",\n      toCurrency: \"GBP\",\n      amount: 1\n    };\n\n    this.convertHandler = () => {\n      if (this.state.fromCurrency !== this.state.toCurrency) {\n        axios.get(`http://api.openrates.io/latest?base=${this.state.fromCurrency}&symbols=${this.state.toCurrency}`).then(response => {\n          const result = this.state.amount * response.data.rates[this.state.toCurrency];\n          this.setState({\n            result: result.toFixed(5)\n          });\n        }).catch(err => {\n          console.log(\"Opps\", err.message);\n        });\n      } else {\n        this.setState({\n          result: \"You cant convert the same currency!\"\n        });\n      }\n    };\n\n    this.selectHandler = event => {\n      if (event.target.name === \"from\") {\n        this.setState({\n          fromCurrency: event.target.value\n        });\n      }\n\n      if (event.target.name === \"to\") {\n        this.setState({\n          toCurrency: event.target.value\n        });\n      }\n    };\n  }\n\n  // componentDidMount = async () => {\n  //     try {\n  //         const currencyArray = [\"EUR\"];\n  //         let response = await axios.get('http://api.openrates.io/latest');\n  //         const { rates } = response.data;\n  //         for (const key in rates) {\n  //             currencyArray.push(key);\n  //         }\n  //         currencyArray.sort();\n  //         this.setState({ currencies: currencyArray })\n  //     } catch(error) {\n  //         console.log('An error occurred trying to fetch data from the rates API', error);\n  //     }\n  // };\n  componentDidMount() {\n    axios.get(\"http://api.openrates.io/latest\").then(response => {\n      // Initialized with 'EUR' because the base currency is 'EUR'\n      // and it is not included in the response\n      const currencyAr = [\"EUR\"];\n\n      for (const key in response.data.rates) {\n        currencyAr.push(key);\n      }\n\n      this.setState({\n        currencies: currencyAr.sort()\n      });\n    }).catch(err => {\n      console.log(\"Opps\", err.message);\n    });\n  } // Event handler for the conversion\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Converter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Currency \"), \" Converter \", React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"money\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"\\uD83D\\uDCB5\"), \" \"), React.createElement(\"div\", {\n      className: \"Form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      name: \"amount\",\n      type: \"text\",\n      value: this.state.amount,\n      onChange: event => this.setState({\n        amount: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"select\", {\n      name: \"from\",\n      onChange: event => this.selectHandler(event),\n      value: this.state.fromCurrency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.state.currencies.map(cur => React.createElement(\"option\", {\n      key: cur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, cur))), React.createElement(\"select\", {\n      name: \"to\",\n      onChange: event => this.selectHandler(event),\n      value: this.state.toCurrency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.currencies.map(cur => React.createElement(\"option\", {\n      key: cur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, cur))), React.createElement(\"button\", {\n      onClick: this.convertHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Convert\")), this.state.result && React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.state.result));\n  }\n\n}\n\n;\nexport default Converter;","map":{"version":3,"sources":["/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/components/converter/converter.web.js"],"names":["React","Component","axios","defaults","headers","post","Converter","state","currencies","result","fromCurrency","toCurrency","amount","convertHandler","get","then","response","data","rates","setState","toFixed","catch","err","console","log","message","selectHandler","event","target","name","value","componentDidMount","currencyAr","key","push","sort","render","map","cur"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\naxios.defaults.headers.post['Content-Type'] ='application/x-www-form-urlencoded';\n\nclass Converter extends Component {\n    state = {\n        currencies: [],\n        result: null,\n        fromCurrency: \"EUR\",\n        toCurrency: \"GBP\",\n        amount: 1,\n    };\n\n    // componentDidMount = async () => {\n    //     try {\n    //         const currencyArray = [\"EUR\"];\n    //         let response = await axios.get('http://api.openrates.io/latest');\n    //         const { rates } = response.data;\n    //         for (const key in rates) {\n    //             currencyArray.push(key);\n    //         }\n    //         currencyArray.sort();\n    //         this.setState({ currencies: currencyArray })\n    //     } catch(error) {\n    //         console.log('An error occurred trying to fetch data from the rates API', error);\n    //     }\n    // };\n\n    componentDidMount() {\n        axios\n            .get(\"http://api.openrates.io/latest\")\n            .then(response => {\n                // Initialized with 'EUR' because the base currency is 'EUR'\n                // and it is not included in the response\n                const currencyAr = [\"EUR\"]\n                for (const key in response.data.rates) {\n                    currencyAr.push(key)\n                }\n                this.setState({ currencies: currencyAr.sort() })\n            })\n            .catch(err => {\n                console.log(\"Opps\", err.message);\n            });\n    }\n\n    // Event handler for the conversion\n    convertHandler = () => {\n        if (this.state.fromCurrency !== this.state.toCurrency) {\n            axios\n                .get(`http://api.openrates.io/latest?base=${this.state.fromCurrency}&symbols=${this.state.toCurrency}`)\n                .then(response => {\n                    const result = this.state.amount * (response.data.rates[this.state.toCurrency]);\n                    this.setState({ result: result.toFixed(5) })\n                })\n                .catch(err => {\n                    console.log(\"Opps\", err.message);\n                });\n        } else {\n            this.setState({ result: \"You cant convert the same currency!\" })\n        }\n    };\n\n    selectHandler = (event) => {\n        if (event.target.name === \"from\") {\n            this.setState({ fromCurrency: event.target.value })\n        }\n        if (event.target.name === \"to\") {\n            this.setState({ toCurrency: event.target.value })\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"Converter\">\n                <h2><span>Currency </span> Converter <span role=\"img\" aria-label=\"money\">&#x1f4b5;</span> </h2>\n                <div className=\"Form\">\n                    <input\n                        name=\"amount\"\n                        type=\"text\"\n                        value={this.state.amount}\n                        onChange={event =>\n                            this.setState({ amount: event.target.value })\n                        }\n                    />\n                    <select\n                        name=\"from\"\n                        onChange={(event) => this.selectHandler(event)}\n                        value={this.state.fromCurrency}\n                    >\n                        {this.state.currencies.map(cur => (\n                            <option key={cur}>{cur}</option>\n                        ))}\n                    </select>\n                    <select\n                        name=\"to\"\n                        onChange={(event) => this.selectHandler(event)}\n                        value={this.state.toCurrency}\n                    >\n                        {this.state.currencies.map(cur => (\n                            <option key={cur}>{cur}</option>\n                        ))}\n                    </select>\n                    <button onClick={this.convertHandler}>Convert</button>\n                </div>\n                {this.state.result &&\n                <h3>{this.state.result}</h3>\n                }\n            </div>\n        )\n    }\n};\n\nexport default Converter;\n"]},"metadata":{},"sourceType":"module"}