{"ast":null,"code":"var _jsxFileName = \"/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/components/converter/converter.web.js\";\nimport React, { Component } from 'react';\nimport { fetchLatestCurrencies } from '../../api/currency.api';\nimport CurrencyDropdown from '../currencyDropdown/currencyDropdown.web';\nimport { Result, Currencies, Amount } from '../index';\nimport TextField from '../textField/textField.web';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport fx from 'money';\nimport './converter.scss';\nfx.base = 'EUR';\n\nclass Converter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currencies: [],\n      result: null,\n      fromCurrency: \"EUR\",\n      toCurrency: \"GBP\",\n      amount: 1\n    };\n\n    this.componentDidMount = async () => {\n      // A default while the api request returns values\n      const currencyArray = [\"EUR\"];\n      let rates = await fetchLatestCurrencies();\n      fx.rates = rates;\n\n      for (const key in rates) {\n        currencyArray.push(key);\n      }\n\n      currencyArray.sort();\n      this.setState({\n        currencies: currencyArray\n      });\n    };\n\n    this.handleConversion = () => {\n      if (this.state.fromCurrency !== this.state.toCurrency) {\n        const convertedResult = fx(this.state.amount).from(this.state.fromCurrency).to(this.state.toCurrency);\n        this.setState({\n          result: convertedResult\n        });\n      } else {\n        this.setState({\n          result: \"You cant convert the same currency!\"\n        });\n      }\n    };\n\n    this.handleCurrencySelect = ({\n      target: {\n        value,\n        name\n      }\n    }) => {\n      if (name === \"From\") {\n        this.setState({\n          fromCurrency: value\n        });\n      }\n\n      if (name === \"To\") {\n        this.setState({\n          toCurrency: value\n        });\n      }\n    };\n\n    this.setAmount = amount => {\n      this.setState({\n        amount\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Once currencies are loaded - do an initial conversion to be shown on first render\n    if (prevState.currencies !== this.state.currencies) {\n      this.handleConversion();\n    } // when the user changes the 'To' currency, automatically convert\n\n\n    if (prevState.toCurrency !== this.state.toCurrency) {\n      this.handleConversion();\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          fromCurrency = _this$state.fromCurrency,\n          toCurrency = _this$state.toCurrency,\n          currencies = _this$state.currencies,\n          result = _this$state.result,\n          amount = _this$state.amount;\n    return React.createElement(Paper, {\n      className: \"converter-container\",\n      style: {\n        padding: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: \"title-text\",\n      variant: \"h4\",\n      component: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Currency Converter\"), React.createElement(Result, Object.assign({\n      result,\n      toCurrency\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), React.createElement(Currencies, Object.assign({\n      currencies,\n      fromCurrency,\n      toCurrency,\n      handleCurrencySelect: this.handleCurrencySelect\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), React.createElement(Amount, Object.assign({\n      amount,\n      setAmountCallback: this.setAmount,\n      handleConversion: this.handleConversion\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Converter;","map":{"version":3,"sources":["/Users/reggiemorgan/Dev2020/LeasePlan/lease-plan-currency-converter/src/components/converter/converter.web.js"],"names":["React","Component","fetchLatestCurrencies","CurrencyDropdown","Result","Currencies","Amount","TextField","Typography","Button","Paper","CachedIcon","fx","base","Converter","state","currencies","result","fromCurrency","toCurrency","amount","componentDidMount","currencyArray","rates","key","push","sort","setState","handleConversion","convertedResult","from","to","handleCurrencySelect","target","value","name","setAmount","componentDidUpdate","prevProps","prevState","render","padding","setAmountCallback"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { fetchLatestCurrencies } from '../../api/currency.api';\nimport CurrencyDropdown from '../currencyDropdown/currencyDropdown.web';\nimport { Result, Currencies, Amount } from '../index';\nimport TextField from '../textField/textField.web';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport fx from 'money';\nimport './converter.scss';\n\nfx.base = 'EUR';\n\nclass Converter extends Component {\n    state = {\n        currencies: [],\n        result: null,\n        fromCurrency: \"EUR\",\n        toCurrency: \"GBP\",\n        amount: 1,\n    };\n\n    componentDidMount = async () => {\n        // A default while the api request returns values\n        const currencyArray = [\"EUR\"];\n        let rates = await fetchLatestCurrencies();\n        fx.rates = rates;\n        for (const key in rates) {\n            currencyArray.push(key);\n        }\n        currencyArray.sort();\n        this.setState({ currencies: currencyArray })\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        // Once currencies are loaded - do an initial conversion to be shown on first render\n        if(prevState.currencies !== this.state.currencies) {\n            this.handleConversion();\n        }\n        // when the user changes the 'To' currency, automatically convert\n        if(prevState.toCurrency !== this.state.toCurrency) {\n            this.handleConversion();\n        }\n\n    }\n\n    handleConversion = () => {\n        if (this.state.fromCurrency !== this.state.toCurrency) {\n            const convertedResult = fx(this.state.amount).from(this.state.fromCurrency).to(this.state.toCurrency);\n            this.setState({ result: convertedResult });\n        } else {\n            this.setState({ result: \"You cant convert the same currency!\" })\n        }\n    };\n\n    handleCurrencySelect = ({ target: { value, name }}) => {\n        if (name === \"From\") {\n            this.setState({ fromCurrency: value })\n        }\n        if (name === \"To\") {\n            this.setState({ toCurrency: value });\n        }\n    };\n\n    setAmount = amount => {\n        this.setState({ amount })\n    };\n\n    render() {\n        const { fromCurrency, toCurrency, currencies, result, amount } = this.state;\n        return (\n            <Paper className=\"converter-container\" style={{ padding: 20 }}>\n                <Typography className=\"title-text\" variant=\"h4\" component=\"h4\">Currency Converter</Typography>\n                <Result {...{ result, toCurrency }} />\n                <Currencies {...{ currencies, fromCurrency, toCurrency, handleCurrencySelect: this.handleCurrencySelect }} />\n                <Amount {...{ amount, setAmountCallback: this.setAmount, handleConversion: this.handleConversion }} />\n            </Paper>\n        )\n    }\n}\n\nexport default Converter;\n"]},"metadata":{},"sourceType":"module"}