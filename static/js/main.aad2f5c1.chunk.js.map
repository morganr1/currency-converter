{"version":3,"sources":["api/currency.api.js","components/converter/converter.web.js","components/converter/elements/result.element.js","components/converter/elements/currencies.element.js","components/converter/elements/amount.element.js","components/dropdown/dropdown.web.js","components/textField/textField.web.js","App.js","serviceWorker.js","index.js"],"names":["fetchLatestCurrencies","a","async","fetch","response","json","rates","console","log","fx","base","Converter","state","currencies","result","fromCurrency","toCurrency","amount","componentDidMount","currencyArray","key","push","sort","setState","handleConversion","from","to","handleCurrencySelect","target","value","name","swapCurrencies","prevState","resetForm","setAmount","prevProps","this","themeType","props","disabled","Paper","elevation","className","style","paddingTop","paddingBottom","Typography","variant","component","setAmountCallback","buttonText","Component","Result","background","color","toLocaleString","undefined","currency","split","Currencies","values","currentValue","onChangeCallback","label","IconButton","alignSelf","aria-label","size","onClick","useStyles","makeStyles","theme","button","width","marginTop","breakpoints","down","container","alignItems","display","flexDirection","margin","Amount","classes","e","Button","root","startIcon","formControl","spacing","select","selectEmpty","DropDownComponent","inputLabel","React","useRef","useState","labelWidth","setLabelWidth","useEffect","current","offsetWidth","FormControl","InputLabel","ref","id","Select","labelId","onChange","map","curr","MenuItem","textField","marginLeft","marginRight","TextFieldComponent","TextField","autoFocus","type","required","InputProps","inputMode","inputProps","min","App","darkMode","toggleDarkMode","useMemo","createMuiTheme","palette","responsiveFontSizes","ThemeProvider","position","top","right","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aad2f5c1.chunk.js","sourcesContent":["\nexport const fetchLatestCurrencies = async () => {\n    try {\n        let response = await fetch('https://api.exchangeratesapi.io/latest');\n        let { rates } = await response.json();\n        return rates;\n    } catch(error) {\n        console.log('An error occurred trying to fetch data from the rates API', error);\n    }\n};","import React, { Component } from 'react';\nimport { fetchLatestCurrencies } from '../../api/currency.api';\nimport { Result, Currencies, Amount } from '../index';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport fx from 'money';\nimport './converter.scss';\n\nfx.base = 'EUR';\n\nclass Converter extends Component {\n    state = {\n        currencies: [],\n        result: null,\n        fromCurrency: \"EUR\",\n        toCurrency: \"GBP\",\n        amount: 1,\n    };\n\n    componentDidMount = async () => {\n        // A default while the api request returns values\n        const currencyArray = [\"EUR\"];\n        let rates = await fetchLatestCurrencies();\n        fx.rates = rates;\n        for (const key in rates) {\n            currencyArray.push(key);\n        }\n        currencyArray.sort();\n        this.setState({ currencies: currencyArray })\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        const { currencies, toCurrency, fromCurrency, amount } = this.state;\n        // Once currencies are loaded - do an initial conversion to be shown on first render\n        if(prevState.currencies !== currencies) {\n            this.handleConversion();\n        }\n        // when the user changes the 'To' currency, automatically convert\n        if(prevState.toCurrency !== toCurrency || prevState.fromCurrency !== fromCurrency) {\n            this.handleConversion();\n        }\n\n        if(prevState.amount !== this.state.amount && amount) {\n            this.handleConversion();\n        }\n\n    }\n\n    handleConversion = () => this.setState({ result: fx(this.state.amount).from(this.state.fromCurrency).to(this.state.toCurrency) });\n\n    handleCurrencySelect = ({ target: { value, name }}) => {\n        if (name === \"From\") {\n            this.setState({ fromCurrency: value })\n        }\n        if (name === \"To\") {\n            this.setState({ toCurrency: value });\n        }\n    };\n\n    swapCurrencies = () => this.setState(prevState => ({ toCurrency: prevState.fromCurrency, fromCurrency: prevState.toCurrency }))\n\n    resetForm = amount => {\n        this.setState({ amount, result: 1 });\n        this.handleConversion();\n    };\n\n    setAmount = amount => this.setState({ amount });\n\n    render() {\n        const { fromCurrency, toCurrency, currencies, result, amount } = this.state;\n        const { themeType } = this.props;\n        const disabled = !amount;\n        return (\n            <Paper elevation={21} className=\"converter-container\" style={{ paddingTop: 20, paddingBottom: 30 }}>\n                <Typography className=\"title-text\" variant=\"h5\" component=\"h5\">CURRENCY CONVERTER</Typography>\n                <Result {...{ result, toCurrency, themeType }} />\n                <Currencies {...{ disabled, currencies, fromCurrency, toCurrency, swapCurrencies: this.swapCurrencies, handleCurrencySelect: this.handleCurrencySelect }} />\n                <Amount {...{ disabled, amount, setAmountCallback: this.setAmount, resetForm: this.resetForm, buttonText: 'Clear' }} />\n            </Paper>\n        )\n    }\n}\n\nexport default Converter;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Typography from \"@material-ui/core/Typography\";\n\nexport const Result = ({ result, toCurrency, themeType}) =>\n    <Typography style={{ background: themeType !== 'dark' ? 'ghostwhite' : '#333333' }} className=\"result-text\"  color=\"textSecondary\" variant=\"h4\" component=\"h4\">\n    {result && result.toLocaleString(undefined, { style: \"currency\", currency: toCurrency }).split(' ')[0]}\n</Typography>;\n\nResult.propTypes = {\n    result: PropTypes.any,\n    toCurrency: PropTypes.string.isRequired,\n    themeType: PropTypes.string.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\nimport { Dropdown } from './../../index';\nimport IconButton from \"@material-ui/core/IconButton\";\n\nexport const Currencies = ({ disabled, currencies, swapCurrencies, fromCurrency, toCurrency, handleCurrencySelect }) =>\n    <div className=\"currencies-container\">\n        <Dropdown {...{ disabled, values: currencies, currentValue: fromCurrency, onChangeCallback: handleCurrencySelect, label: 'From' }}/>\n        <IconButton\n            style={{ alignSelf: 'center' }}\n            disabled={disabled}\n            aria-label=\"swap currency button\"\n            size=\"large\"\n            onClick={() => swapCurrencies()}\n            color=\"primary\"\n        >\n            <SwapHorizIcon />\n        </IconButton>\n        <Dropdown {...{ disabled, values: currencies, currentValue: toCurrency, onChangeCallback: handleCurrencySelect, label: 'To' }}/>\n    </div>;\n\nCurrencies.propTypes = {\n    disabled: PropTypes.bool,\n    currencies: PropTypes.array.isRequired,\n    fromCurrency: PropTypes.string.isRequired,\n    toCurrency: PropTypes.string.isRequired,\n    handleCurrencySelect: PropTypes.func.isRequired\n};\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { TextField } from \"./../../index\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from \"@material-ui/core/Button\";\nimport ClearIcon from '@material-ui/icons/Clear';\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        width: 400,\n        marginTop: 20,\n        [theme.breakpoints.down(460)]: {\n            width: 300\n        },\n        [theme.breakpoints.down(362)]: {\n            width: 200\n        },\n    },\n    container: {\n        alignItems: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        margin: '0 auto',\n        width: 257,\n    }\n}));\n\nexport const Amount = ({ disabled, amount, setAmountCallback, resetForm, buttonText }) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.container}>\n            <TextField {...{ value: amount, label: 'Amount', onChangeCallback: e => setAmountCallback(e.target.value) }} />\n            <Button\n                classes={{ root: classes.button }}\n                disabled={disabled}\n                aria-label=\"convert currency button\"\n                size=\"large\"\n                onClick={() => resetForm(1)}\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<ClearIcon />}\n            >\n                {buttonText}\n            </Button>\n    </div>\n    );\n};\n\nAmount.propTypes = {\n    disabled: PropTypes.bool,\n    amount: PropTypes.number.isRequired,\n    setAmountCallback: PropTypes.func.isRequired,\n    resetForm: PropTypes.func.isRequired,\n    buttonText: PropTypes.string.isRequired\n};\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles(theme => ({\n    formControl: {\n        margin: theme.spacing(1),\n    },\n    select: {\n        width: 170,\n        [theme.breakpoints.down(460)]: {\n            width: 120\n        },\n        [theme.breakpoints.down(362)]: {\n            width: 92\n        },\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    }\n}));\n\nexport const DropDownComponent = ({ disabled, values, currentValue, onChangeCallback, label }) => {\n    const classes = useStyles();\n    const inputLabel = React.useRef(null);\n    const [labelWidth, setLabelWidth] = React.useState(0);\n\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n\n    return (\n        <Fragment>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel ref={inputLabel} id={`${label}-dropdown-label`}>\n                    {label}\n                </InputLabel>\n                <Select\n                    disabled={disabled}\n                    className={classes.select}\n                    name={label}\n                    labelId={`${label}-dropdown-label`}\n                    id={`${label}-dropdown`}\n                    value={currentValue}\n                    onChange={onChangeCallback}\n                    labelWidth={labelWidth}\n                >\n                    {values.map(curr => <MenuItem key={curr} value={curr}>{curr}</MenuItem>)}\n                </Select>\n            </FormControl>\n        </Fragment>\n    );\n};\n\nDropDownComponent.propTypes = {\n  disabled: PropTypes.bool,\n  values: PropTypes.array.isRequired,\n  currentValue: PropTypes.string.isRequired,\n  onChangeCallback: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst useStyles = makeStyles(theme => ({\n    textField: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        width: 400,\n        [theme.breakpoints.down(460)]: {\n            width: 300\n        },\n        [theme.breakpoints.down(362)]: {\n            width: 200\n        },\n    },\n}));\n\nexport const TextFieldComponent = ({ value, onChangeCallback, label }) => {\n    const classes = useStyles();\n    return (\n        <FormControl variant=\"outlined\">\n            <TextField\n                aria-label={`${label} text field`}\n                autoFocus={true}\n                className={classes.textField}\n                id={`${label}-input`}\n                label={label}\n                value={value}\n                onChange={onChangeCallback}\n                margin=\"normal\"\n                variant=\"outlined\"\n                type=\"number\"\n                required\n                InputProps={{\n                    inputMode: \"numeric\",\n                    inputProps: {\n                        min: 1\n                    }\n                }}\n            />\n        </FormControl>\n    );\n};\n\nTextFieldComponent.propTypes = {\n    value: PropTypes.number.isRequired,\n    onChangeCallback: PropTypes.func.isRequired,\n    label: PropTypes.string.isRequired\n};","import React, { useState } from 'react';\nimport CurrencyConverter from './components';\nimport Button from '@material-ui/core/Button';\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles';\n\nfunction App() {\n    const [darkMode, toggleDarkMode] = useState(false);\n    let theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    type: darkMode ? 'dark' : 'light',\n                },\n            }),\n        [darkMode],\n    );\n    theme = responsiveFontSizes(theme);\n    const type = theme.palette.type;\n    return (\n          <ThemeProvider theme={theme}>\n            <Button\n                style={{ position: 'absolute', top: 0, right: 0 }}\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => toggleDarkMode(!darkMode)}>\n               {darkMode ? 'Go Light' : 'Go Dark' }\n            </Button>\n            <CurrencyConverter themeType={type} />\n          </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}