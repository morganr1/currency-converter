{"version":3,"sources":["api/currency.api.js","components/converter/converter.web.js","components/converter/elements/result.element.js","components/converter/elements/currencies.element.js","components/converter/elements/amount.element.js","components/dropdown/dropdown.web.js","components/textField/textField.web.js","App.js","serviceWorker.js","index.js"],"names":["fetchLatestCurrencies","a","async","fetch","response","json","rates","console","log","fx","base","Converter","state","currencies","result","fromCurrency","toCurrency","amount","componentDidMount","currencyArray","key","push","sort","setState","handleConversion","from","to","handleCurrencySelect","target","value","name","swapCurrencies","prevState","resetForm","setAmount","prevProps","this","themeType","props","disabled","Paper","elevation","className","style","paddingTop","paddingBottom","Typography","variant","component","setAmountCallback","buttonText","Component","Result","background","color","toLocaleString","undefined","currency","split","Currencies","values","currentValue","onChangeCallback","label","IconButton","alignSelf","aria-label","size","onClick","useStyles","makeStyles","theme","button","width","marginTop","breakpoints","down","container","alignItems","display","flexDirection","margin","Amount","classes","e","Button","root","startIcon","formControl","spacing","select","selectEmpty","DropDownComponent","inputLabel","React","useRef","useState","labelWidth","setLabelWidth","useEffect","current","offsetWidth","FormControl","InputLabel","ref","id","Select","labelId","onChange","map","curr","MenuItem","textField","marginLeft","marginRight","TextFieldComponent","TextField","autoFocus","type","required","InputProps","inputMode","inputProps","min","darkTheme","createMuiTheme","palette","lightTheme","default","responsiveFontSizes","App","darkMode","toggleDarkMode","ThemeProvider","CssBaseline","position","top","right","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2781dc91.chunk.js","sourcesContent":["export const fetchLatestCurrencies = async () => {\n  try {\n    let response = await fetch('https://api.exchangeratesapi.io/latest');\n    let { rates } = await response.json();\n    return rates;\n  } catch (error) {\n    console.log(\n      'An error occurred trying to fetch data from the rates API',\n      error\n    );\n  }\n};\n","import React, { Component } from 'react';\nimport { fetchLatestCurrencies } from '../../api/currency.api';\nimport { Result, Currencies, Amount } from '../index';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport fx from 'money';\nimport './converter.scss';\n\nfx.base = 'EUR';\n\nclass Converter extends Component {\n  state = {\n    currencies: [],\n    result: null,\n    fromCurrency: 'EUR',\n    toCurrency: 'GBP',\n    amount: 1\n  };\n\n  componentDidMount = async () => {\n    // A default while the api request returns values\n    const currencyArray = ['EUR'];\n    let rates = await fetchLatestCurrencies();\n    fx.rates = rates;\n    for (const key in rates) {\n      currencyArray.push(key);\n    }\n    currencyArray.sort();\n    this.setState({ currencies: currencyArray });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currencies, toCurrency, fromCurrency, amount } = this.state;\n    // Once currencies are loaded - do an initial conversion to be shown on first render\n    if (prevState.currencies !== currencies) {\n      this.handleConversion();\n    }\n    // when the user changes the 'To' currency, automatically convert\n    if (\n      prevState.toCurrency !== toCurrency ||\n      prevState.fromCurrency !== fromCurrency\n    ) {\n      this.handleConversion();\n    }\n\n    if (prevState.amount !== this.state.amount && amount) {\n      this.handleConversion();\n    }\n  }\n\n  handleConversion = () =>\n    this.setState({\n      result: fx(this.state.amount)\n        .from(this.state.fromCurrency)\n        .to(this.state.toCurrency)\n    });\n\n  handleCurrencySelect = ({ target: { value, name } }) => {\n    if (name === 'From') {\n      this.setState({ fromCurrency: value });\n    }\n    if (name === 'To') {\n      this.setState({ toCurrency: value });\n    }\n  };\n\n  swapCurrencies = () =>\n    this.setState(prevState => ({\n      toCurrency: prevState.fromCurrency,\n      fromCurrency: prevState.toCurrency\n    }));\n\n  resetForm = amount => {\n    this.setState({ amount, result: 1 });\n    this.handleConversion();\n  };\n\n  setAmount = amount => this.setState({ amount });\n\n  render() {\n    const { fromCurrency, toCurrency, currencies, result, amount } = this.state;\n    const { themeType } = this.props;\n    const disabled = !amount;\n    return (\n      <Paper\n        elevation={21}\n        className=\"converter-container\"\n        style={{ paddingTop: 20, paddingBottom: 30 }}\n      >\n        <Typography className=\"title-text\" variant=\"h5\" component=\"h5\">\n          CURRENCY CONVERTER\n        </Typography>\n        <Result {...{ result, toCurrency, themeType }} />\n        <Currencies\n          {...{\n            disabled,\n            currencies,\n            fromCurrency,\n            toCurrency,\n            swapCurrencies: this.swapCurrencies,\n            handleCurrencySelect: this.handleCurrencySelect\n          }}\n        />\n        <Amount\n          {...{\n            disabled,\n            amount,\n            setAmountCallback: this.setAmount,\n            resetForm: this.resetForm,\n            buttonText: 'Clear'\n          }}\n        />\n      </Paper>\n    );\n  }\n}\n\nexport default Converter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\n\nexport const Result = ({ result, toCurrency, themeType }) => (\n  <Typography\n    style={{ background: themeType !== 'dark' ? 'ghostwhite' : '#333333' }}\n    className=\"result-text\"\n    color=\"textSecondary\"\n    variant=\"h4\"\n    component=\"h4\"\n  >\n    {result &&\n      result\n        .toLocaleString(undefined, { style: 'currency', currency: toCurrency })\n        .split(' ')[0]}\n  </Typography>\n);\n\nResult.propTypes = {\n  result: PropTypes.any,\n  toCurrency: PropTypes.string.isRequired,\n  themeType: PropTypes.string.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\nimport { Dropdown } from './../../index';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const Currencies = ({\n  disabled,\n  currencies,\n  swapCurrencies,\n  fromCurrency,\n  toCurrency,\n  handleCurrencySelect\n}) => (\n  <div className=\"currencies-container\">\n    <Dropdown\n      {...{\n        disabled,\n        values: currencies,\n        currentValue: fromCurrency,\n        onChangeCallback: handleCurrencySelect,\n        label: 'From'\n      }}\n    />\n    <IconButton\n      style={{ alignSelf: 'center' }}\n      disabled={disabled}\n      aria-label=\"swap currency button\"\n      size=\"large\"\n      onClick={() => swapCurrencies()}\n      color=\"secondary\"\n    >\n      <SwapHorizIcon />\n    </IconButton>\n    <Dropdown\n      {...{\n        disabled,\n        values: currencies,\n        currentValue: toCurrency,\n        onChangeCallback: handleCurrencySelect,\n        label: 'To'\n      }}\n    />\n  </div>\n);\n\nCurrencies.propTypes = {\n  disabled: PropTypes.bool,\n  currencies: PropTypes.array.isRequired,\n  fromCurrency: PropTypes.string.isRequired,\n  toCurrency: PropTypes.string.isRequired,\n  handleCurrencySelect: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextField } from './../../index';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    width: 400,\n    marginTop: 20,\n    [theme.breakpoints.down(460)]: {\n      width: 300\n    },\n    [theme.breakpoints.down(362)]: {\n      width: 200\n    }\n  },\n  container: {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '0 auto',\n    width: 257\n  }\n}));\n\nexport const Amount = ({\n  disabled,\n  amount,\n  setAmountCallback,\n  resetForm,\n  buttonText\n}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <TextField\n        {...{\n          value: amount,\n          label: 'Amount',\n          onChangeCallback: e => setAmountCallback(e.target.value)\n        }}\n      />\n      <Button\n        classes={{ root: classes.button }}\n        disabled={disabled}\n        aria-label=\"convert currency button\"\n        size=\"large\"\n        onClick={() => resetForm(1)}\n        variant=\"contained\"\n        color=\"primary\"\n        startIcon={<ClearIcon />}\n      >\n        {buttonText}\n      </Button>\n    </div>\n  );\n};\n\nAmount.propTypes = {\n  disabled: PropTypes.bool,\n  amount: PropTypes.number.isRequired,\n  setAmountCallback: PropTypes.func.isRequired,\n  resetForm: PropTypes.func.isRequired,\n  buttonText: PropTypes.string.isRequired\n};\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1)\n  },\n  select: {\n    width: 170,\n    [theme.breakpoints.down(460)]: {\n      width: 120\n    },\n    [theme.breakpoints.down(362)]: {\n      width: 92\n    }\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nexport const DropDownComponent = ({\n  disabled,\n  values,\n  currentValue,\n  onChangeCallback,\n  label\n}) => {\n  const classes = useStyles();\n  const inputLabel = React.useRef(null);\n  const [labelWidth, setLabelWidth] = React.useState(0);\n\n  React.useEffect(() => {\n    setLabelWidth(inputLabel.current.offsetWidth);\n  }, []);\n\n  return (\n    <Fragment>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel ref={inputLabel} id={`${label}-dropdown-label`}>\n          {label}\n        </InputLabel>\n        <Select\n          disabled={disabled}\n          className={classes.select}\n          name={label}\n          labelId={`${label}-dropdown-label`}\n          id={`${label}-dropdown`}\n          value={currentValue}\n          onChange={onChangeCallback}\n          labelWidth={labelWidth}\n        >\n          {values.map(curr => (\n            <MenuItem key={curr} value={curr}>\n              {curr}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Fragment>\n  );\n};\n\nDropDownComponent.propTypes = {\n  disabled: PropTypes.bool,\n  values: PropTypes.array.isRequired,\n  currentValue: PropTypes.string.isRequired,\n  onChangeCallback: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    width: 400,\n    [theme.breakpoints.down(460)]: {\n      width: 300\n    },\n    [theme.breakpoints.down(362)]: {\n      width: 200\n    }\n  }\n}));\n\nexport const TextFieldComponent = ({ value, onChangeCallback, label }) => {\n  const classes = useStyles();\n  return (\n    <FormControl variant=\"outlined\">\n      <TextField\n        aria-label={`${label} text field`}\n        autoFocus={true}\n        className={classes.textField}\n        id={`${label}-input`}\n        label={label}\n        value={value}\n        onChange={onChangeCallback}\n        margin=\"normal\"\n        variant=\"outlined\"\n        type=\"number\"\n        required\n        InputProps={{\n          inputMode: 'numeric',\n          inputProps: {\n            min: 1\n          }\n        }}\n      />\n    </FormControl>\n  );\n};\n\nTextFieldComponent.propTypes = {\n  value: PropTypes.number.isRequired,\n  onChangeCallback: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired\n};\n","import React, { useState } from 'react';\nimport CurrencyConverter from './components';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  responsiveFontSizes\n} from '@material-ui/core/styles';\n\nlet darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  }\n});\n\nlet lightTheme = createMuiTheme({\n  palette: {\n    type: 'light',\n    background: {\n      default: 'linear-gradient(to right, #363795, #005C97)'\n    }\n  }\n});\n\ndarkTheme = responsiveFontSizes(darkTheme);\nlightTheme = responsiveFontSizes(lightTheme);\n\nfunction App() {\n  const [darkMode, toggleDarkMode] = useState(false);\n  const type = darkMode ? darkTheme.palette.type : lightTheme.palette.type;\n  return (\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\n      <CssBaseline />\n      <Button\n        style={{ position: 'absolute', top: 0, right: 0 }}\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={() => toggleDarkMode(!darkMode)}\n      >\n        {darkMode ? 'Go Light' : 'Go Dark'}\n      </Button>\n      <CurrencyConverter themeType={type} />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}