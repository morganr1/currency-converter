{"version":3,"sources":["api/currency.api.js","components/converter/converter.web.js","components/converter/elements/result.element.js","components/converter/elements/currencies.element.js","components/converter/elements/amount.element.js","components/dropdown/dropdown.web.js","components/textField/textField.web.js","App.js","serviceWorker.js","index.js"],"names":["fetchLatestCurrencies","a","async","fetch","response","json","rates","console","log","fx","base","Converter","state","currencies","result","fromCurrency","toCurrency","amount","componentDidMount","currencyArray","key","push","sort","setState","handleConversion","from","to","handleCurrencySelect","target","value","name","resetForm","setAmount","prevProps","prevState","this","themeType","props","disabled","Paper","elevation","className","style","paddingTop","paddingBottom","Typography","variant","component","setAmountCallback","buttonText","Component","Result","background","color","toLocaleString","undefined","currency","split","Currencies","values","currentValue","onChangeCallback","label","styles","alignItems","display","flexDirection","margin","minWidth","Amount","e","Button","width","aria-label","size","onClick","startIcon","useStyles","makeStyles","theme","formControl","spacing","select","selectEmpty","marginTop","DropDownComponent","classes","inputLabel","React","useRef","useState","labelWidth","setLabelWidth","useEffect","current","offsetWidth","FormControl","InputLabel","ref","id","Select","labelId","onChange","map","curr","MenuItem","textField","marginLeft","marginRight","TextFieldComponent","TextField","autoFocus","type","required","InputProps","inputMode","inputProps","min","App","darkMode","toggleDarkMode","useMemo","createMuiTheme","palette","responsiveFontSizes","ThemeProvider","position","top","right","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb3dd401.chunk.js","sourcesContent":["\nexport const fetchLatestCurrencies = async () => {\n    try {\n        let response = await fetch('https://api.exchangeratesapi.io/latest');\n        let { rates } = await response.json();\n        return rates;\n    } catch(error) {\n        console.log('An error occurred trying to fetch data from the rates API', error);\n    }\n};","import React, { Component } from 'react';\nimport { fetchLatestCurrencies } from '../../api/currency.api';\nimport { Result, Currencies, Amount } from '../index';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport fx from 'money';\nimport './converter.scss';\n\nfx.base = 'EUR';\n\nclass Converter extends Component {\n    state = {\n        currencies: [],\n        result: null,\n        fromCurrency: \"EUR\",\n        toCurrency: \"GBP\",\n        amount: 1,\n    };\n\n    componentDidMount = async () => {\n        // A default while the api request returns values\n        const currencyArray = [\"EUR\"];\n        let rates = await fetchLatestCurrencies();\n        fx.rates = rates;\n        for (const key in rates) {\n            currencyArray.push(key);\n        }\n        currencyArray.sort();\n        this.setState({ currencies: currencyArray })\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        const { currencies, toCurrency, fromCurrency, amount } = this.state;\n        // Once currencies are loaded - do an initial conversion to be shown on first render\n        if(prevState.currencies !== currencies) {\n            this.handleConversion();\n        }\n        // when the user changes the 'To' currency, automatically convert\n        if(prevState.toCurrency !== toCurrency || prevState.fromCurrency !== fromCurrency) {\n            this.handleConversion();\n        }\n\n        if(prevState.amount !== this.state.amount && amount) {\n            this.handleConversion();\n        }\n\n    }\n\n    handleConversion = () => this.setState({ result: fx(this.state.amount).from(this.state.fromCurrency).to(this.state.toCurrency) });\n\n    handleCurrencySelect = ({ target: { value, name }}) => {\n        if (name === \"From\") {\n            this.setState({ fromCurrency: value })\n        }\n        if (name === \"To\") {\n            this.setState({ toCurrency: value });\n        }\n    };\n\n    resetForm = amount => {\n        this.setState({ amount, result: 1 });\n        this.handleConversion();\n    };\n\n    setAmount = amount => this.setState({ amount });\n\n    render() {\n        const { fromCurrency, toCurrency, currencies, result, amount } = this.state;\n        const { themeType } = this.props;\n        const disabled = !amount;\n        return (\n            <Paper elevation={21} className=\"converter-container\" style={{ paddingTop: 20, paddingBottom: 30 }}>\n                <Typography className=\"title-text\" variant=\"h5\" component=\"h5\">CURRENCY CONVERTER</Typography>\n                <Result {...{ result, toCurrency, themeType }} />\n                <Currencies {...{ disabled, currencies, fromCurrency, toCurrency, handleCurrencySelect: this.handleCurrencySelect }} />\n                <Amount {...{ disabled, amount, setAmountCallback: this.setAmount, resetForm: this.resetForm, buttonText: 'Clear' }} />\n            </Paper>\n        )\n    }\n}\n\nexport default Converter;\n","import Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\n\nexport const Result = ({ result, toCurrency, themeType}) =>\n    <Typography style={{ background: themeType !== 'dark' ? 'ghostwhite' : '#333333' }} className=\"result-text\"  color=\"textSecondary\" variant=\"h4\" component=\"h4\">\n    {result && result.toLocaleString(undefined, { style: \"currency\", currency: toCurrency }).split(' ')[0]}\n</Typography>;\n","import React from 'react';\nimport { Dropdown } from './../../index';\n\nexport const Currencies = ({ disabled, currencies, fromCurrency, toCurrency, handleCurrencySelect }) =>\n    <div className=\"currencies-container\">\n        <Dropdown {...{ disabled, values: currencies, currentValue: fromCurrency, onChangeCallback: handleCurrencySelect, label: 'From' }}/>\n        <Dropdown {...{ disabled, values: currencies, currentValue: toCurrency, onChangeCallback: handleCurrencySelect, label: 'To' }}/>\n    </div>;\n","import { TextField } from \"./../../index\";\nimport Button from \"@material-ui/core/Button\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport React from \"react\";\n\nconst styles = {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '0 auto',\n    minWidth: 257\n};\n\nexport const Amount = ({ disabled, amount, setAmountCallback, resetForm, buttonText }) =>\n    <div className=\"amount-container\" style={styles}>\n        <TextField {...{ value: amount, label: 'Amount', onChangeCallback: e => setAmountCallback(e.target.value) }} />\n        <Button\n            disabled={disabled}\n            style={{ width: 400 }}\n            aria-label=\"convert currency button\"\n            size=\"large\"\n            onClick={() => resetForm(1)}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<ClearIcon />}\n        >\n            {buttonText}\n        </Button>\n    </div>;","import React, { Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles(theme => ({\n    formControl: {\n        margin: theme.spacing(1),\n    },\n    select: {\n        width: 192,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    }\n}));\n\nexport const DropDownComponent = ({ disabled, values, currentValue, onChangeCallback, label }) => {\n    const classes = useStyles();\n    const inputLabel = React.useRef(null);\n    const [labelWidth, setLabelWidth] = React.useState(0);\n\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n\n    return (\n        <Fragment>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel ref={inputLabel} id={`${label}-dropdown-label`}>\n                    {label}\n                </InputLabel>\n                <Select\n                    disabled={disabled}\n                    className={classes.select}\n                    name={label}\n                    labelId={`${label}-dropdown-label`}\n                    id={`${label}-dropdown`}\n                    value={currentValue}\n                    onChange={onChangeCallback}\n                    labelWidth={labelWidth}\n                >\n                    {values.map(curr => <MenuItem key={curr} value={curr}>{curr}</MenuItem>)}\n                </Select>\n            </FormControl>\n        </Fragment>\n    );\n};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst useStyles = makeStyles(theme => ({\n    textField: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        width: 400,\n    },\n}));\n\nexport const TextFieldComponent = ({ value, onChangeCallback, label }) => {\n    const classes = useStyles();\n    return (\n        <FormControl variant=\"outlined\">\n            <TextField\n                aria-label={`${label} text field`}\n                autoFocus={true}\n                className={classes.textField}\n                id={`${label}-input`}\n                label={label}\n                value={value}\n                onChange={onChangeCallback}\n                margin=\"normal\"\n                variant=\"outlined\"\n                type=\"number\"\n                required\n                InputProps={{\n                    inputMode: \"numeric\",\n                    inputProps: {\n                        min: 1\n                    }\n                }}\n            />\n        </FormControl>\n    );\n};\n","import React, { useState } from 'react';\nimport CurrencyConverter from './components';\nimport Button from '@material-ui/core/Button';\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles';\n\nfunction App() {\n    const [darkMode, toggleDarkMode] = useState(false);\n    let theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    type: darkMode ? 'dark' : 'light',\n                },\n            }),\n        [darkMode],\n    );\n    theme = responsiveFontSizes(theme);\n    const type = theme.palette.type;\n    return (\n          <ThemeProvider theme={theme}>\n            <Button\n                style={{ position: 'absolute', top: 0, right: 0 }}\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => toggleDarkMode(!darkMode)}>\n               {darkMode ? 'Go Light' : 'Go Dark' }\n            </Button>\n            <CurrencyConverter themeType={type} />\n          </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}